ADDING INTERACTIVITY

1 - Responding to Events
2 - Sate: A component's Memory





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1 - Responding to Events

Event handlers (functions that are called in response to interactions like clicking, typing, scrolling, etc.) can be added to jsx to add interactivity.

1.1 - Adding event handlers to components

    - pass the event handler as a prop to the appropriate jsx
    - name of event handlers tends to start with "handle + event name". 
        - e.g. onClick = {handleClick}
    - there is major difference between passing functions and calling them when event handlers are passed as props to a jsx tag or a component.
        - passing: function is called only when the event fires
            - e.g. onClick={handleClick} OR onClick={() => alert("hello")}
        - calling: function is called as soon as the component renders
            - e.g. onClick={handleClick()} OR onClick={alert("hello")}.
    - can be defined separately or inline.
    - custom names can also be given to event handlers to your components but the lowest level jsx tag must use only built-in-browser event names.
        - e.g. 
            <Button onSmash ={} /> is correct
            <button onSmash ={}></button> is wrong
            <button onClick ={}></button> is correct


1.2 - Event handlers and props

    - Passing props to event handlers
        - props declared inside parent component can be read/passed to event handlers (because event handlers are also defined inside the component) just like they are read inside child component.
        - e.g: 
            

    - Passing event handlers as props
        - event handlers that are defined in parent components can be passed as props to child components. 
        

1.3 - Event propagation

    Some event handlers are attached to jsx tags which have more tag above them (their parent and/or grandparent divs and so on). In such cases, by default, the event bubbles or propagates up the tree. Starting from inside, the event will fire up, calling the handler associated with it up the the tree, doing the same for tags above it, in "inside-out" manner.

    - Adding propagation 
        - automatic in React and conventional JS. 
        - events triggered inside parent and/grandparent tags/components will fire all the event handlers associated. 

    - Stopping propagation
        - use e.stopPropagation()


1.4 - Preventing default behavior

    - call e.preventDefault()


1.5 - Event handlers are impure

    - event handlers unlike React components are best place to have side effects.
    - in actuality, these functions (event handlers) are used to change things in response to user interactions. Hence, they can have side effects.
    - they need not be pure

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


2 - Sate: A component's Memory

2.1 - What is state?

    - React offers many features to components so that they can retain data, react to user interactions and so on. 
    - "State" is a react feature that allows a component to have memory, thus enabling them to maintain and manage data internally.

2.2 - Intro to Hooks
 
    - Hooks are functions in react, that allow functional components (not class components) to use other React features like state, effect and other React functionalities.
    - Hooks are "special features" in React that allow to "hook into" other React features.
    - Start with the term "use". e.g. useState() or useEffect()

2.3 - useState()

    useState() is a React hook that allows to use state in functional component.

    - Significance
        - local variables that are used inside components to store data do not re-render the component. Any changes to the values of these local variables are not sufficient in making the component store that changed data.  
        - useState() allows components to store and manage data.
        - data stored using useState() lets components re-render while retaining the stored data between re-renders.
         
    - Syntax
        - const [variable, setVariable] = useState()
        - useState() is called and stored in an array which always returns two items: 
            - state variable: value that you want to store, retain and update between re-renders.
            - state setter function: function that updates state variable between re-renders.

    - Characteristics
        - allows to re-render components.
        - always returns an array with two items.
        - argument to useState() becomes the value for the state variable.
        - cannot be declared and called conditionally.
        - must be stated at the top of the component.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


3 - Renders and commits

Components as chefs in the kitchen and React as the waiter taking orders from the guest (user).

3.1 - What "rendering" means in React?

    - Rendering refers to the process of calling a component in React. 
    - In more general sense, it refers to the whole process of triggering, calling and updating changes to the DOM. 

3.2 - Steps involved in any screen update in React

    - Triggering a render 
        - The process is similar waiter brining in the order from the guest.
        - Triggering renders happens in two scenarios:
            - Initial renders: When the apps loads for the first time, React triggers the first render by calling th createRoot() with the target DOM node and then calling its "render" method with the specific component.
            - Re-renders when states update: React triggers re-renders any time a component's (or its ancestor component's) state gets updated.

    - Rendering the component
        - This process is similar to the chef making the dish
        - Rendering in real sense, is React calling the component
        - Rendering also happens in two scenarios:
            - Initial rendering: Rendering the root component when the app loads (or the root component calls another component)
            - Re-rendering: Rendering the component whose state has been updated.

    - Committing to the DOM
        - Changes are committed to the DOM in two scenarios:
            - Committing Initial render: React uses appendChild() api to update the initial render of a component to the DOM
            - Committing re-render of state updated components.

3.3 - Important points related to React rendering and DOM updates

        - Process of displaying output to the user after all these three processes is termed as "browser rendering".
        - React only commits changes to the DOM when there is a difference (a state update) between the current React DOM and the actual DOM.
        - It doesn't touch the actual DOM if the rendering result is same as the last time.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


4 - State as a snapshot

    - Setting state requests a new render.
    - Rendering a component (calling the functional component in React) returns the jsx which was stored as a snapshot of UI in that particular time (in that particular render). 
        - This "snapshot" contains all local variables, event handlers and state variables.
        - This JSX is "interactive" as it contains logic for what would happen in response to user interactions.
        - "Event handlers and state variable values are fixed based on the snapshot calculated from the state of that particular render.
        - These values change once React takes another snapshot, when the state variable updates in new renders.
    - A state variable's value never changes in the same render. It only updates in the next render (even if it is followed by async code).
    - Use "substitution method" in code when this concept gets confusing.